[1] Introduce
컴퓨터 비전
-사람처럼 물체를 인식하게 만드는 것이 목표

사람의 한계를 뛰어넘는 것이 목적
-물리적 한계(가시거리, 시야 제한, 색약)
-인지적 한계(무주의, 사각지대)

컴퓨터가 물체를 인식할 때는 무수한 픽셀 값으로 이미지를 인식하게 된다.

컴퓨터 비전의 기술
Image Classification = 분류
Object Detection = 사전에 분류된 객체를 찾아내고 어떤 클래스인지 알아내는 것
Object Segmentation = 영상 내에서 원하는 객체에 대해 픽셀의 분할 결과를 알아내는 것
(이미지를 주고 객체를 인지하게 한 다음 영상에서 그 객체에 대한 분할 결과를 알아낼 수 있다)

CNN 도입에 따라 최근 5년 내에 정확도 발전이 일어났다.

영상에서 Tracking 하는 분야: MOT(Multi-Object_Tracking)
Pose Estimation-skeleton: 움직이는 객체의 관절 움직임 
Image colorization: 흑백 이미지를 컬러로 만드는 것
Style Transfer: 원하는 그림 양식으로 스타일을 입히는 것

이러한 컴퓨터 비전을 위해 퀄리티가 좋고 조건에 맞는 이미지가 필요! ->영상처리 공부
1. Low-light enhancement :밝기 조절
2. Denoise: 깔끔하게 
3. Deweathering: 안개나 역광 조절
4. Desnowing, Dehazing...etc

[1-1] Image fundamental(이미지 기초)

Digital Image: 수많은 pixel로 이루어져있다.
1. pixel은 최소 단위
2. x좌표와 y좌표를 가져서 이미지에 위치를 나타낼 수 있다. (항상 정수의 위치에만 존재)
3. color는 RGB (x,y,z)의 3차원 벡터값, 흑백은 밝기에 대한 2차원 스칼라 값을 가진다.
 (항상 정수의 값만 가진다) = discrete(불연속적인 값을 가진다) value:0~255

Digital Video: set of images
Low Frame: image 개수 적음
High Framge: image 개수 많음
PNG: 무손실압축, 손실이 가장 적음
JPEG: 손실 압축, 압축이 쉽지만 손실이 일어남
GIF: 짧은 동영상

[2] Pixel-wise operation(픽셀 간의 계산)

[2-1] Arithmetic Operation(산술 계산)

Input image I를 넣었을 때 f(i)가 output으로 나오는 것
(값은 0~255로 제한되어있다, 단 type을 double형(0.0~1.0)으로 설정 시 최댓값 변경됨)
*pixel 값이 클수록 밝다. ex) 반전을 주려면 invert => 255-x 최댓값에서 값을 빼면 됨
 
[2-2] Histogram

image에서 각각의 픽셀 값이 얼마나 있는지 그래프로 나타낸 것
*대비가 좋은 image(high-contrast image)는 픽셀 값이 고르게(uniform) 분포되어있다.

Histogram stretch
:일정 값에 몰려있는 픽셀 값들을 고르게 펼쳐주어 보기 좋게 image를 만드는 작업
-stretching function에 값을 넣어서 계산해주면 됨
단점: 사람이 직접 histogram 결과값을 보고 계산을 해야됨

Gamma correction
:histogram stretch의 결과는 선형으로 나타나는데 곡선으로 나타내기 위해 감마 값을 지수 승으로 둔 함수를 나타내는 방법

[2-3] Histogram equalization

:image를 넣으며 자동으로 픽셀 값들을 고르게 바꿔주는 작업(stretch의 단점 보완)
적절한 함수를 거쳐 원하는 값을 얻어내는 것이 과정

-0~1로 값을 가정하고 불연속적인 histogram을 연속적인 함수로 간주한다.
-연속적인 함수의 면적이 1이 되도록 설정
-그 함수를 최댓값이 1인 직사각형 면적을 가진 함수로 변환
-두 함수의 넓이가 1로 같으므로 monotonic increasing function(증가함수)일 경우 연속적인 함수의 개형으로 변형해주는 함수를 구할 수 있다.(과정은 생략) 
*밝기 역전을 방지하기 위해 증가함수라는 조건이 필요하다. 
[3] Image filtering
pixel-wise operation과는 다르게 부분별로 주변 값을 이용해 값을 변형시켜주는 것

[3-1] box filter
:image의 픽셀값과 average box의 크기를 같게 하고 같은 위치의 값끼리 곱하고 더한 후 평균을 구해 값 산출

*가장 외각의 테두리는 빈칸으로 남게 되는데 box filter의 범위를 벗어나게 돼서 값을 구할 수 없기에 그렇게 된 것이다.->padding을 채워서 계산 가능
*padding의 종류 ex) zero padding, wrap around, copy edge, reflect across edge
 크기를 맞춰서 filtering 하고 다시 날려줘야함.

linear filter의 예시-smoothing, sharpening

[3-2] Gaussian filter
-정규분포의 개형을 띄는 필터(center일수록 가중치를 줘서 값을 계산)
-전체적인 밝기를 바꾸지 않기 위해서 1/sum 필요.
-시그마가 클수록 넓게 분포하고, 좁을수록 좁게 분포한다.
(시그마가 너무 작으면 값의 변화가 적기 때문에 smoothing 효과가 작다)

Gaussian filter를 돌린 결과
-high frequency 요소를 제거 (smoothing과 비슷한 효과)
-값들의 합이 1이어야 하고 edge의 값들은 0에 가깝다. 

[3-3] Separability of the Gaussian filter
:2D image를 1Dx1D로 분리하여 계산하는 것

1) 2D filtering: filter와 image box를 계산
2) Separability: filter를 나누어서 계산 
ex  1 2 1       1  x  1 2 1
    2 4 2   ->  2
    1 2 1       1

2개의 결과는 같지만 왜 separability를 사용하냐면 연산 수가 작아서 속도가 빠르기 때문

[3-4] Filtering vs Convolution
:filter의 값이 정반대일 뿐, 값은 같다. 따라서 거의 유사하다고 본다.

[3-5] Median filters
:중간 값만 취하여 튀는 값(noise)를 제거하는 역할 ex)salt and pepper Noise
[4] Image pyramids
:image를 키우고 줄여 조절하는 과정

[4-1] Aliasing현상
:undersampling(표본이 적으면 정보 손실이 커질 수 있다.)으로 인한 왜곡
ex) moire현상: 원래 없는 현상이 생기는 것

Anti_aliasing으로 해결
1) oversample the signal
2) smooth the signal(ex) gaissian filter)

[4-2] Gaussian pyramid
Q: 피라미드 전체의 image 합은 원본 이미지보다 얼마나 큰가?
A: 4/3배, 등비수열의 합으로 계산(image는 1/2배씩 줄어들지만 넓이는 1/4배로 줄어듬)

Gaussian pyramid 특성
1) 올라갈수록(image 크기가 작아질수록) smoothing이 많이 일어남
2) 높은 층에서 보존되는 영역은 원본 이미지의 고르고 넓은 부분
3) 작아진 image에서 다시 복구될 수는 없다.(blurring 자체가 손실이기 때문, residual을 남겨놓으면 가능)

[4-3] Laplacian image pyramid(residual pyramid)
:residual 부분을 피라미드화 한 것

[4-4] Upsampling
:줄여놓은 것을 키우는 것은 laplacian, 애초에 원본을 키우는 것을 의미

한 pixel에 대해 가로, 세로를 키우게 되면 blocking 현상(block처럼 보임)이 일어나 image로써 가치가 없다.
그래서 interpolaion 이용

[4-5] Interpolation
: input이 4개이고 output이 8개일 때 나머지 output 값들을 어떻게 생성하는가에 대한 과정

방법
1) nearest
-가까운 이웃 값과 같은 값으로 처리하여 값 생성
(복제를 하는 것이기 때문에 dot 혹은 block이 보이는 경향)
2) linear
-1차 함수, 즉 linear를 그려서 값들을 이어 선 상의 그 사잇값을 넣는 것
*공식: x1과 x2 사이의 거리 비를 이용해 보다 정확한 선 상의 값을 구하는 것
(dot나 block이 보이지는 않지만 blur가 살짝 씌워진 것처럼 보임)
3) Bilinear Interpolation(in 2D)
-쉽게 설명하면 1Dx1D 과정과 같다. 가로축에서 거리 비를 이용한 linear 공식을 각각 적용한 후, 그 값을 이용해 세로축에서 한 번 더 공식을 이용하는 방법

[4-6] upsampling pixel 계산
: (m, n)와 (m, n+1)을  (2m, 2n), (2m, 2n+2)으로 키우고 그 사이를 (2m, 2n+1)로 채우기

[4-7] 정수배가 아닌 실수배 계산
: 가로, 세로는 실수배를 하면 되고 그 안의 값들은 x/factor, y/factor로 계산한 후 bilinear interpolation을 이용해 값을 정해주면 된다.
 
[5] Edge detection
[5-1] Characterizing edges
:갑자기 변화가 일어나는 부분(rapid change in the image intensity function)
-그래프 상에서 절댓값으로 변화가 큰 부분

[5-2] Sobel filter
:edge를 만드는 filter = vertical line을 찾을 때 유용하다(-1 0 1 derivative filter가 수평의 차이를 크게 해줌)
<vertical sobel filter>
-1 0 1    1   -1 0 1            
-2 0 2 =  2 * 
-1 0 1    1
        blurring
<horizontal sobel filter>
-1 -2 -1    -1   1 2 1
 0  0  0 =   0 * 
-1 -2 -1     1

[5-3] Image Gradient
:2D를 수평과 수직 방향을 나누어 각각 볼 수도 있지만 변화도(gradient)자체와 각도를 확인할 수도 있다
Edgd가 되려면 기준인 threshold보다 높은 값을 말한다.

잡음제거를 위해 Gaussian filter를 이용하면 edge도 완만해지는 경향도 있지만 확실히 잡음이 없어지게 된다.

[5-4] Second-order derivative filter
:2차 미분을 해보기

gaussian filter를 씌워 잡음을 제거한 f(x)에 1차 미분을 하면 x=0에서 극점이 하나 나오고
2차 미분을 하게 되면 양수, 음수가 바뀌는 변곡점이 x=0에서 나오게 된다.
부호가 바뀌는 부분이 edge가 된다.

[5-5]Laplace filter
:2차 미분을 하게 되면 얻게 되는 filter(1 -2 1)
(수식 참조)
 
[5-6]Laplacian of Gaussian(LOG)
:기존 신호 I에 2차 미분한 Gaussian filter를 씌우고 I와 컨볼루션 한 것
=edge 부분을 변곡점에서 찾을 수 있고 잡음도 줄일 수 있음

Laplace filtering과 비교해보면 잡음이 제거된 image를 반환한다.

[5-7]Laplacian of Gaussian(LOG) vs Derivative of Gaussian(DOG) 
:2차 미분한 결과와 1차 미분한 결과를 비교하면 LOG는 zero-crossing 부분들이 edge 근방에 나타남.
DOG는 peak라고 굵은 선으로 나타남. 따라서 edge만 보자면 극점만 나타내는 DOG보다 부호가 바뀌는 부분을 나타내는 LOG가 더 낫다.

하지만 zero-crossing도 edge를 나타내는 선을 기준으로 양쪽에 하얗게 표시되는데 edge로만 이루어진 image를 얻으려면 
Canny edge detector를 이용하면 된다.

[6]Canny edge detector
:edge를 탐색할 때 사용하여 변화량을 측정가능하다.

non-max suppression
-gradient magnitude가 너무 센 경우 얇게 바꿔주는 것
:제일 센 magnitude를 찾아서 표시하는 것

gradient의 각도도 구할 수 있다.(공식)

[6-1]Hysteresis thresholding(Double threshloding)
:정교하게 thresholding하는 방법
1)TL < x  < TH => weak edge
2) x  >TH => strong edge
3) x  <TL => edge가 아니다

[6-2]Morphological(형태분석)
segmentation
:비슷한 데이터끼리 그룹화 하는 것
=threshold를 통해 이미지를 분할하는 것도 큰 틀에서 보면 segmentation이라고 할 수 있다.

Binary Images
:0 또는 1, 흑백 등 두 가지로 나타낼 수 있는 image

Neighborhoods
 4-neighborhood: 동서남북으로 4개가 해당 / connectedness는 상하좌우 이동만 가능,  대각선 이동 불가
 8-neighborhood: 3x3에서 가운데 자신 제외 나머지 모두 / connectedness는 상하좌우, 대각선 이동 가능

Recursive labeling
:하나를 기준으로 옮겨가며 확인 하는 방법, 확인하고 해당 숫자이면 해당 label로 변경하면서 개수 확인

[6-3] Morphological processing
Translation
: t(u, v)이면 x방향으로 u만큼, y방향으로 v만큼 이동하는 것

Dilation
:정해진 structuring element로 합해서 B의 한 칸마다 정해진 element를 씌워주는 것
=image가 fatter(굵어지는) 효과

Erosion
:Dilation과 반대 개념으로, B 안에 element가 완전히 포함되는 경우 그 위치의 element의 가운데 위치만 남기는 것
=image가 thiner(얇아지는) 효과

Boundary Detection by Dilation and Erosion(실습)!

Opening: Erosion->Dilation (큰 부분은 남기고 튀어나온 것들을 제거하는 효과)
Closing: Dilation->Erosion (기존의 영역보다 커지고 들어간 부분을 채워주는 효과)

Opening과 Closing의 차이와 비교

[7]Image Warping
:image를 비틀고 각도를 조절하는 과정
ex)video stabilization

Geometric transform
:이미지의 좌표 이동

Scaling= 좌표 이동 및 n배 계산
Shear= 기울기 계산

[7-1]Warping
:이동된 좌표 기준으로 이미지 생성

Foward Warping= 픽셀이 M(x,y)를 통한 결과 x',y'으로 바뀌면서 모든 픽셀을 계산하면 이미지가 생성됨
*실수처럼 정해진 칸에 있지 않은 픽셀의 경우 splatting이라 하여 겹쳐진 곳에 모두 바뀐 값을 보내버린다.
 splatting 후 값이 겹쳐지게 된다면(다대일 관계) 평균으로 나눠주면 된다.
 
Backward Warping= 역 행렬 계산을 통해 원래의 image로 돌아가려면 어떻게 해야하는지를 이용해 계산하는 것.
*변형된 좌표가 딱 떨어지는 x,y가 아니라 소수라면 주변 4개의 point를 interpolation을  통해 f(x,y)정수를 구한다.
 원래 image인 f(x,y)가 결과로 나오므로 Foward Warping처럼 hole이 생기지 않는다.
 
[9]Iamge Restoration 
:image를 깨끗하게 하고 정제하는 과정

image degradation의 종류
-noise, blur..etc

g(x,) = h(x,y)*f(x,y) + n(x,y)
        filter*기본 이미지 + 잡음

salt and pepper noise removal
-low-pass filtering
:예로 gaussian filter와 같은 것이 있는데 정규 분포 상에서 값이 센 부분들을 넓게 분포하는 값으로 맞춰주는 것인데
salt and pepper는 특정한 noise들이 너무 튀는 값으로 되어있어서 이 filter로는 적합하지 않다.

-Median Filtering
:평균값을 찾아서 튀는 값을 평균값으로 대체해주는 filter로 salt and pepper를 해결하기에 적합하다.
예를 들면 3x3이면 9개의 값을 일렬로 나열 후 중간 값을 뽑고 salt에 해당하는 가장 튀는 값을 중간 값으로 교체해주는 방법
average filter를 쓰게 되면 9개의 값의 평균을 구해서 그렇게 변경해주면 값이 너무 커지기 때문에 median filter가 효과적이다
median filter는 필터가 클수록 더 noise 제거에 효과적이다.

-Outlier rejection method
:튀는 값을 제거해주는 방법으로 적합하다

Gaussian noise removal
:실제 이미지 = 이미지 + 노이즈 라고 했을 때
각 항을 100번, 1000번씩 더하고 다시 나눠주는 과정을 하면 기존의 이미지는 그대로 값이 나오는데 노이즈는 n번으로 나눠주면 0으로 수렴한다.
따라서 노이즈가 제거되는 과정

Adaptive filter(wiener filter)
:한 이미지에 부분 별로 다른 필터를 적용하는 것
분산이 작으면 평균값에 치중하고 분산 값이 높으면 원래 픽셀값을 더 활용하는 것

Gaussian filter로 하면 모두 뿌옇게 되고 Bilateral filtering을 하게 되면 각 픽셀에 맞는 필터를 적용할 수 있따

[9-1]Nonlocal Means(NLM) filtering
:꼭 같은 부분에서의 patch들을 이용해서 noise를 제거할 것만 아니라 더 많은 픽셀들을 이용하기 위해 비슷한 영역의 patch들을 이용해
average를 내서 noise를 제거하는 방법

[10]Huffman coding
:무손실 압축에 해당하며 자주 발생하는 픽셀 값에 더 적은 비트 수를 부여하고 적게 발생하는 픽셀 값에 더 많은 비트 수를 부여하는 방법

encoding:비트화
decoding:비트화 한 것을 다시 복구

[10-1]Run-length Encoding
:encoding 결과가 0 또는 1로 나오므로 00000을 (0,5)로 표현하여 좀 더 간단하게 나타내는 방법

[10-2]JPEG algorithm
:손실 압축에 대해서 데이터 손실과 압축력은 반비례 관계. 


[14]CNN(convolution neural network)
:이미지 분류가 목적
[14-1]Image Classification
-이미지 분류의 방해요소: illumination(밝기), deformation(변형), occlusion(가려짐), background clutter(보호색)
















































